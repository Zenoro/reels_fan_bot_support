import threading
import re
import os
from dotenv import load_dotenv, dotenv_values
from telebot import TeleBot, apihelper
import yt_dlp
from params import *
from utils import *

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
values = dotenv_values()
bot = TeleBot(values['BOT_TOKEN'])

target_inst_dir = 'reels'
os.makedirs(target_inst_dir, exist_ok=True)

class VideoHandler:
    def __init__(self, bot, message, type):
        self.bot = bot
        self.message = message
        self.chat_id = message.chat.id
        self.thread_id = message.message_thread_id
        self.text = message.text
        self.username = message.forward_from.username if message.forward_from else message.from_user.username
        self.type = type

    def preprocess(self, wait_text):
        self.bot.delete_message(self.chat_id, self.message.message_id)
        self.feedback_msg = self.bot.send_message(chat_id=self.chat_id,
                                                  message_thread_id=self.thread_id,
                                                  text=wait_text)

    def extract_caption(self, matched):
        user_caption = f'{self.type} –æ—Ç @{self.username}'
        text_caption = matched.groups()[-1]
        self.caption = text_caption + '\n' + user_caption if text_caption else user_caption

    def handle_error(self, error_text):
        self.bot.edit_message_text(chat_id=self.chat_id,
                                   message_id=self.feedback_msg.message_id,
                                   text=error_text)

    def download_and_send_video(self):
        try:
            video_path, info = dwld_YTDLP_video(self.text, YDL_OPTS)
            try:
                if IS_THUMBS:
                    cover_path = dwld_YTThumb(info, os.path.join(os.getcwd(), 'thumbnail.jpg'))
            except:
                print("ERROR OCCURED WHILE TAKING THUMBNAIL")
            self.bot.send_video(chat_id=self.chat_id,
                                message_thread_id=self.thread_id,
                                video=open(video_path, 'rb'),
                                caption=self.caption,
                                thumb=open(cover_path, 'rb'))
            self.bot.delete_message(chat_id=self.chat_id,
                                    message_id=self.feedback_msg.message_id)
            os.remove(video_path) if os.path.exists(video_path) else None
            os.remove(cover_path) if os.path.exists(cover_path) else None
            print(f"Video \"{video_path}\" has sent successfully.")
        except yt_dlp.utils.DownloadError as e:
            self.handle_error(f'{self.type}–∞ –Ω–µ –±—É–¥–µ—Ç :(\n–æ—à–∏–±–∫–∞: {e}')
        except:
            self.handle_error('–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ. –±–æ—Ç –∑–∞–Ω—è—Ç –∏–ª–∏ –ø—É—Å—Ç—å –∞–¥–º–∏–Ω —Å–º–æ—Ç—Ä–∏—Ç –ª–æ–≥–∏')
        
    def process(self, matched):
        self.preprocess(f'—â–∞ –±—É–¥–µ—Ç {self.type}')
        self.extract_caption(matched)
        self.download_video()

@bot.message_handler(func=lambda message: message.text.startswith('https://'))
def handle_urls(message: dict) -> None:
    if (matched := re.match(fr'(({'|'.join(YT_URLS)})\S*)\s*(.*)', message.text)):
        type = IS_SHORTS and '—à–æ—Ä—Ç—Å'
    elif (matched := re.match(fr'(({'|'.join(IG_URLS)})\S*)\s*(.*)', message.text)):
        type = IS_REELS and '—Ä–∏–ª—Å'
    elif (matched := re.match(fr'(({'|'.join(VK_URLS)})\S*)\s*(.*)', message.text)):
        type = IS_VKCLIPS and '–≤–∫ –∫–ª–∏–ø'
    else:
        bot.reply_to(message=message,
                     text="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å—Å—ã–ª–∫–∞")
    if type:
        VideoHandler(bot, message, type).process(matched)
    else:
        bot.reply_to(message=message, text='–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —ç—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞')

@bot.message_handler(commands=['status'])
def send_status(message: dict) -> None:
    chat_id = message.chat.id
    thread_id = message.message_thread_id
    bottext = '...'
    # bottext = f"ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ó–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:\n" \
    #           f"ü§§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ä–∏–ª—Å–æ–≤: {REELS_CNT}\n" \
    #           f"ü©≥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —à–æ—Ä—Ç—Å–æ–≤: {SHORTS_CNT}\n" \
    #           f"ü§Ø –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –í–ö –ö–õ–ò–ü–û–í: {VKCLIPS_CNT}\n" \
    #           f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {ERR_CNT}"
    bot.send_message(chat_id=chat_id,
                     message_thread_id=thread_id,
                     text=bottext)


@bot.message_handler(commands=['start'])
def send_start(message: dict) -> None:
    chat_id = message.chat.id
    thread_id = message.message_thread_id
    bottext = "ü§ñ –ü—Ä–∏–≤–µ—Ç! –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n" \
              "ü§§ /status: —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞\n"
    bot.send_message(chat_id=chat_id,
                     message_thread_id=thread_id,
                     text=bottext)

# Start polling the bot
print("Bot starting")
try:
    bot.infinity_polling(timeout=10, long_polling_timeout=5)
except apihelper.ApiException as e:
    print(f"API Exception occurred: {e}")
    # print("Bot is already running on another device. Exiting.")
except Exception as e:
    print(f"An unexpected error occurred: {e}")
print("Bot stopped.")